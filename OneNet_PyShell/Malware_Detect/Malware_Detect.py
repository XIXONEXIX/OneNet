import os
import psutil
import socket
import subprocess
import shutil

# Define suspicious processes and file locations
suspicious_process_names = ['malware.exe', 'rootkit.exe']  # List of suspicious process names
suspicious_file_paths = [
    'C:\\Windows\\system32\\malicious_file.exe',
    'C:\\Program Files\\rootkit.exe'
]  # Example locations of suspicious files

# Function to check for suspicious processes
def check_processes():
    print("Checking running processes...")
    for process in psutil.process_iter(['pid', 'name', 'exe']):
        try:
            if any(suspicious_name.lower() in process.info['name'].lower() for suspicious_name in suspicious_process_names):
                print(f"Suspicious process found: {process.info['name']} (PID: {process.info['pid']})")
                terminate_process(process.info['pid'])
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass

# Function to terminate a suspicious process
def terminate_process(pid):
    try:
        process = psutil.Process(pid)
        process.terminate()
        print(f"Terminated suspicious process with PID: {pid}")
    except psutil.NoSuchProcess:
        print(f"Process with PID {pid} does not exist.")
    except psutil.AccessDenied:
        print(f"Access denied to terminate process with PID: {pid}")

# Function to check for suspicious files
def check_files():
    print("Checking for suspicious files...")
    for file_path in suspicious_file_paths:
        if os.path.exists(file_path):
            print(f"Suspicious file found: {file_path}")
            remove_file(file_path)

# Function to remove a suspicious file
def remove_file(file_path):
    try:
        os.remove(file_path)
        print(f"Deleted suspicious file: {file_path}")
    except PermissionError:
        print(f"Permission denied to delete file: {file_path}")
    except FileNotFoundError:
        print(f"File not found: {file_path}")

# Function to check network connections
def check_network_connections():
    print("Checking network connections...")
    for conn in psutil.net_connections(kind='inet'):
        local_ip = conn.laddr.ip
        remote_ip = conn.raddr.ip if conn.raddr else 'N/A'
        print(f"Local IP: {local_ip}, Remote IP: {remote_ip}, Status: {conn.status}")

# Function to scan for suspicious registry entries (example)
def check_registry():
    print("Checking for suspicious registry entries...")
    # Example: checking for unusual registry keys
    suspicious_registry_keys = [
        r'SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\malicious_entry'
    ]
    for key in suspicious_registry_keys:
        if check_registry_key(key):
            print(f"Suspicious registry key found: {key}")
            # Perform cleanup if needed

# Function to check for the presence of a registry key
def check_registry_key(key):
    try:
        registry_key = subprocess.check_output(f'reg query "HKCU\\{key}"', shell=True, stderr=subprocess.PIPE)
        if registry_key:
            return True
    except subprocess.CalledProcessError:
        return False
    return False

# Main function to perform all checks
def main():
    print("Starting custom TDSSKiller-like tool...\n")
    
    # Check running processes
    check_processes()
    
    # Check files
    check_files()
    
    # Check network activity
    check_network_connections()
    
    # Check registry (if needed)
    check_registry()

    print("\nScan complete.")

if __name__ == '__main__':
    main()
